{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"KIYANJA LABS - MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#cli-commands","title":"CLI-Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <p>We usually design :Beers: solutions as described by our :face-agent:</p>"},{"location":"admonitions/","title":"Admonitions","text":"<p>Example of Admonition/Callout with Title:</p> <p>Title of the Callout</p> <p>Ein richtiges archloch von president wie der Tromp Der kann mich mal Wenn er es wagt Afrikanische L\u00e4nder Archloch zu nennen</p> Collapsible Callout <p>Ein richtiges archloch von president wie der Tromp Der kann mich mal Wenn er es wagt Afrikanische L\u00e4nder Archloch zu nennen</p>"},{"location":"code-examples/","title":"Code examples","text":""},{"location":"code-examples/#content-tabs","title":"Content Tabs","text":""},{"location":"code-examples/#generic-content","title":"Generic Content","text":"Python Python code Block<pre><code>import streamlit as st\nimport pandas as pd\nimport numpy as np\nimport re\nimport nltk\nimport sklearn\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom nltk.corpus import stopwords\nimport string\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n\ndef predict(text):\n    labels = ['Not Spam', 'Spam']\n    x = cv.transform(text).toarray()\n    p = model.predict(x)\n    s = [str(i) for i in p]\n    v = int(' '.join(s))\n    return str('This message is looking to be: '+labels[v])\ndef print_data(df, opt: str):\n    \"\"\"_summary_\n    \"\"\"\n    if opt == 's': print(df.shape)    # print dataset shape ~ 2 colmns,3rows \n    if opt == 'h': print(df.head())\n    if opt == 'x': print(x)\ndef clean_data(message):\n    \"\"\"_summary_\n       remoe all useless characters and string from the messages in the dataset\n    Args:\n        message (_type_): _description_\n    \"\"\"\n    message_without_punc = [character for character in message if character not in string.punctuation]\n    message_without_punc = ''.join(message_without_punc)\n    separator = ' '\n    return separator.join([word for word in message_without_punc.split() if word.lower() not in stopwords.words('english')])\n# NLP Model\ndf = pd.read_csv(r'./spam.csv')\ndf = df.drop(['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'], axis=1)    # drop empty columns!\ndf.rename(columns = {'v1':'labels', 'v2':'message'}, inplace=True)  # rename columns!\ndf['labels'] = df['labels'].map({'ham':0,'spam':1}) # 2colmns,3rows \ndf.drop_duplicates(inplace = True)\n\ndf['message'] = df['message'].apply(clean_data)\n\nx = df['message']\ny = df['labels'] \n\ncv = CountVectorizer()\nx = cv.fit_transform(x)\n\nx_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2, random_state = 0)\n\nmodel = MultinomialNB().fit(x_train, y_train)\npredictions = model.predict(x_test)\n\n# WEBAPP DESIGN\nst.title('Spam Classifier')\nst.image('./spam.jpeg')\nuser_input = st.text_input('Please enter your message')\nsubmit = st.button('Predict')\nif submit:\n    answer = predict([user_input])\n    st.text(answer)\n</code></pre> Javascript Javascript code block<pre><code>    const express = require('express');\n    require(\"dotenv\").config();\n\n    const {configViewEngine} = require('./config/viewEngine');\n    const {initAllWebRoutes} = require('./routes/web')\n    const port = process.env.PORT || 8080;\n    const app = express();\n\n    //config view Engine\n    //configViewEngine(app);\n    app.use(express.static(\"./src/public\"));\n    app.set(\"view engine\", \"ejs\");\n    app.set(\"views\",\"./src/views\");\n\n    /* routes */\n    app.use('/', (req, resp) =&gt; {\n        resp.render('homepage.ejs')\n    })\n\n    app.listen(port, ()=&gt;{\n        console.log(`App is running at the port ${port}`);\n    });\n</code></pre>"},{"location":"content-tabs/","title":"Content tabs","text":""},{"location":"content-tabs/#content-tabs","title":"Content Tabs","text":""},{"location":"content-tabs/#generic-content","title":"Generic Content","text":"Plain textUnordered listOrdered list <p>This is some plein text</p> <ul> <li>First item</li> <li>Second item</li> <li>Tirth item</li> </ul> <ol> <li>First item</li> <li>Second item</li> <li>Tirth item</li> </ol>"},{"location":"content-tabs/#code-blocks-in-content-tabs","title":"Code Blocks in Content Tabs","text":"PythonJavascript <pre><code>def main():\n        print(\"Hello World\")\n        if __name__==\"__main__\":\n</code></pre> <pre><code>function main(){\n    print(\"Hello World\")\n}\n</code></pre>"},{"location":"diagram-examples/","title":"Diagram Examples","text":""},{"location":"diagram-examples/#flowcharts","title":"Flowcharts","text":"<pre><code>graph LR\nA[Start] --&gt; B{Failure?};\nB --&gt;|Yes| C[Investigate...];\nC --&gt; D[Debug];\nD --&gt; B\nB ----&gt;|No| E[Success!];</code></pre>"},{"location":"diagram-examples/#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre>"}]}